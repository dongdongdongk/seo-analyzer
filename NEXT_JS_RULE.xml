<?xml version="1.0" encoding="UTF-8"?>
<nextjs-rules>
 <architecture>
   <rule id="1">
     <title>서버 컴포넌트</title>
     <description>기본적으로 모든 컴포넌트는 서버 컴포넌트로 시작함</description>
   </rule>
   <rule id="2">
     <title>클라이언트 컴포넌트</title>
     <description>꼭 필요한 경우(onClick, 상태 관리 등)만 그 부분만 컴포넌트로 분리해서 `use client` 선언</description>
   </rule>
   <rule id="20">
     <title>명확한 분리</title>
     <description>UI 컴포넌트 vs 서버 로직 vs 상태 로직 분리</description>
   </rule>
   <rule id="31">
     <title>CSR 페이지 최소화</title>
     <description>정말 필요한 곳에만 클라이언트 렌더링 허용</description>
   </rule>
 </architecture>

 <seo-metadata>
   <rule id="3">
     <title>metadata 사용</title>
     <description>각 페이지에 `metadata` 객체 또는 `generateMetadata()` 함수 사용</description>
   </rule>
   <rule id="4">
     <title>시멘틱 태그 사용</title>
     <description>`&lt;h1&gt;`, `&lt;h2&gt;` 등 시멘틱 태그 사용하여 의미 있는 HTML 구조로 마크업 작성</description>
   </rule>
   <rule id="7">
     <title>OG 태그</title>
     <description>SNS 미리보기용 Open Graph 메타태그 정의</description>
   </rule>
 </seo-metadata>

 <performance>
   <rule id="5">
     <title>이미지 최적화</title>
     <description>`next/image` 컴포넌트로 자동 최적화</description>
   </rule>
   <rule id="6">
     <title>정적 렌더링</title>
     <description>가능하면 `generateStaticParams()`나 캐시로 정적 생성 (SSG) 유도</description>
   </rule>
   <rule id="8">
     <title>next/image 활용</title>
     <description>이미지 사이즈 자동 조정 + lazy loading 사용</description>
   </rule>
   <rule id="9">
     <title>지연 로딩</title>
     <description>iframe, 이미지 등은 loading="lazy" 사용</description>
   </rule>
   <rule id="10">
     <title>Suspense</title>
     <description>느린 로딩 구간에 suspense 처리로 UX 향상</description>
   </rule>
   <rule id="11">
     <title>코드 분할</title>
     <description>동적 import (`dynamic()`)로 클라이언트 번들 최소화</description>
   </rule>
   <rule id="12">
     <title>캐시</title>
     <description>fetch에는 `cache`, `revalidate` 옵션 사용</description>
   </rule>
 </performance>

 <security>
   <rule id="13">
     <title>환경 변수</title>
     <description>`.env.local` 파일에 저장하고 절대 커밋 금지</description>
   </rule>
   <rule id="14">
     <title>API 키 보호</title>
     <description>서버 컴포넌트나 백엔드 API 라우트에서만 사용</description>
   </rule>
   <rule id="15">
     <title>입력 검증</title>
     <description>사용자 입력은 항상 sanitize 및 validate</description>
   </rule>
   <rule id="16">
     <title>CORS 정책</title>
     <description>외부 API 요청 시 정책 명확히 확인</description>
   </rule>
 </security>

 <routing>
   <rule id="17">
     <title>중첩 라우트</title>
     <description>디렉토리 구조로 중첩 (`/app/blog/[slug]/page.tsx`)</description>
   </rule>
   <rule id="18">
     <title>인터셉팅 라우트</title>
     <description>모달, 상세 페이지 등은 `(.)` 디렉토리 사용</description>
   </rule>
   <rule id="19">
     <title>라우트 그룹</title>
     <description>URL에는 포함되지 않지만 구조적으로 묶고 싶을 때 `()` 사용</description>
   </rule>
 </routing>

 <code-organization>
   <rule id="21">
     <title>공통 컴포넌트</title>
     <description>`components/common/` 등에 정리</description>
   </rule>
   <rule id="22">
     <title>이름 규칙</title>
     <description>PascalCase 사용 (`MyButton.tsx`)</description>
   </rule>
   <rule id="26">
     <title>타입스크립트 사용</title>
     <description>`.ts`, `.tsx` 기본으로 사용</description>
   </rule>
   <rule id="27">
     <title>ESM 기반</title>
     <description>최신 모듈 방식 사용</description>
   </rule>
 </code-organization>

 <error-handling>
   <rule id="23">
     <title>try-catch</title>
     <description>모든 비동기 로직은 에러 핸들링 포함</description>
   </rule>
   <rule id="24">
     <title>사용자 에러 메시지</title>
     <description>개발자용 로그 + 사용자용 메시지를 구분</description>
   </rule>
   <rule id="25">
     <title>404, 500 페이지</title>
     <description>`not-found.tsx`, `error.tsx` 반드시 구현</description>
   </rule>
 </error-handling>

 <features>
   <rule id="28">
     <title>다국어 처리 (i18n)</title>
     <description>`next-intl`이나 `next-i18next` 사용</description>
   </rule>
   <rule id="29">
     <title>애널리틱스</title>
     <description>Google Analytics, Vercel Analytics 사용</description>
   </rule>
   <rule id="30">
     <title>접근성</title>
     <description>`aria` 속성, 키보드 네비게이션 등 고려</description>
   </rule>
 </features>

 <styling-deployment>
   <rule id="32">
     <title>디자인은 SCSS 사용</title>
     <description>모든 스타일링은 SCSS(Sass)를 사용하고 CSS-in-JS는 사용하지 않음</description>
   </rule>
   <rule id="33">
     <title>배포는 Vercel 사용 + 필요 시 Supabase 사용</title>
     <description>기본 배포 플랫폼은 Vercel을 사용하고, 데이터베이스나 인증 등에는 필요 시 Supabase를 병행 사용</description>
   </rule>
 </styling-deployment>
</nextjs-rules>